<%-- 
Name: Node.js Data Model for API
Author: Luis Danilo Ruiz Tórrez
Description: Modelo de Datos de API basado en Node.js
--%>
<%@ Template Language="CS" TargetLanguage="JavaScript" Description="Genera un modelo de datos"%>
<%@ Property Name="ModelName" Type="System.String"  Category="1. Options" Description="Nombre del modelo." %>
<%@ Property Name="SchemaDef" Type="List<String>" Optional="True" Category="1. Options" 
Description="Requiere de dos líneas por campo; 1. Nombre del campo seguido de "":"" ; 2. Declaración de tipo ""type: <datatype>""" %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Collections.Generic" %>

'use strict'

const mongoose = require('mongoose');
const validator = require('validator');

const Schema = mongoose.Schema;

const <%= ModelName %>Schema = Schema({
    <%= GetSchema(SchemaDef)%>
});

//ToDo: Modify this!!!
/**
 * @swagger
 * components:
 *   schemas:
 *     <%= ModelName %>:
 *       properties: 
 *<%= GetSchema(SchemaDef, SchemaStyle.SwaggerStyle)%>
 */

module.exports = mongoose.model('<%= ModelName %>',<%= ModelName %>Schema);
// mongoDB creará la collección, con documentos de estructura del modelo.

<script runat="template">
// My methods here.
public enum SchemaStyle {
    MongooseStyle,
    SwaggerStyle
};

public string GetSchema(List<string> Lines, SchemaStyle Style = SchemaStyle.MongooseStyle)
{
    string output = "";
    int i =1;
    if(Lines.Count == 0) { //Add Sample if no lines
        Lines.Add("columnNameAutoGenerated:");
        Lines.Add("type: String");   
    }
    
    if(Lines.Count % 2 != 0)
        Lines.Add("  type: String"); //last typedef defaults to String
    
    foreach(string Line in Lines){
        string LineToPrint ="";
        
        //Prepares TypeDef Line to print
        if(i%2 == 0){
            //type line
            switch(Style){
                case SchemaStyle.MongooseStyle:
                    output+=  "  { ";
                    LineToPrint = Line;
                    break;
                default:
                    output+= "  "; //Autoindent 2 espaces
                    LineToPrint = Line.ToLower();
                    string[] typeDef = LineToPrint.Split(':');
                    LineToPrint = typeDef[0] + ": \"" + typeDef[1].Trim() + "\"";
                    break;
            };
        }
        else {
            LineToPrint = Line;
        }
        
        
        output += String.Format("{0}{1}", 
        (Style == SchemaStyle.MongooseStyle?"":"         "),
        (Style == SchemaStyle.MongooseStyle?LineToPrint.Trim():LineToPrint));
        //Add line terminator
        if(i%2 == 0){
            //type line
            switch(Style){
                case SchemaStyle.MongooseStyle:
                    output+=  " }" + (i==Lines.Count?"":",");
                    break;
                default:
                    break;
            };
        }
        //Add new line
        output+=(Style != SchemaStyle.MongooseStyle?Environment.NewLine+" *": Environment.NewLine + "    ");
        i++;
        
    }

  return output;
}

</script>